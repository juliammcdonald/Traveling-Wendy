/* Method copied from javafoundations.Sorting, 
 * with modifications to deal with floating point precison */

public class QuickSortDouble{
  
  private static final double EPSILON = 1E-14;
  
  //-----------------------------------------------------------------
// Sorts the specified array of objects using the quick sort
// algorithm.
//-----------------------------------------------------------------
  public static void quickSortDouble (Double[] data, int min, int max)
  {
    int pivot;
    if (min < max)
    {
      pivot = partition (data, min, max); // make partitions
      quickSort(data, min, pivot-1); // sort left partition
      quickSort(data, pivot+1, max); // sort right partition
    }
  }
  
//-----------------------------------------------------------------
// Creates the partitions needed for quick sort.
//-----------------------------------------------------------------
  private static int partition (Comparable[] data, int min, int max)
  {
// Use first element as the partition value
    Comparable partitionValue = data[min];
    int left = min;
    int right = max;
    while (left < right)
    {
// Search for an element that is > the partition element
      while (data[left].compareTo(partitionValue) <= 0 && left < right)
        left++;
// Search for an element that is < the partitionelement
      while (data[right].compareTo(partitionValue) > 0)
        right--;
      if (left < right)
        swap(data, left, right);
    }
// Move the partition element to its final position
    swap (data, min, right);
    return right;
  }
   
}